if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("ANCOMBC")
library(ANCOMBC)
?secom_dist
library(microbiome)
library(tidyverse)
pseq = subset_samples(dietswap, timepoint == 1)
install.packages("dada2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.11")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("dada2", version = "3.15")
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
path = "/Users/zacharyburcham/Desktop/R_dada2/ena_files/"
list.files(path)
fnFs <- sort(list.files(path, pattern = "_1.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_2.fastq.gz", full.names = TRUE))
FWD <- "ACCTGCGGARGGATCA"  ## CHANGE ME to your forward primer sequence
REV <- "GAGATCCRTTGYTRAAAGTT"  ## CHANGE ME...
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
cutadapt = "/Users/zacharyburcham/.local/bin/cutadapt"
system2(cutadapt, args = "--version") # Run shell commands from R
FWD.RC <- dada2:::rc(FWD)
FWD.RC
1391f_illumina <- "GTACACACCGCCCGTC"
f_illumina <- "GTACACACCGCCCGTC"
r_illumina <- "TGATCCTTCTGCAGGTTCACCTAC"
FWD <- "GTACACACCGCCCGTC"
REV <- "TGATCCTTCTGCAGGTTCACCTAC"
FWD.RC <- dada2:::rc(FWD)
REV.RC <- dada2:::rc(REV)
FWD.RC
REV.RC
FWD
REV
# LOAD READS
path = "/Users/zacharyburcham/Desktop/R_dada2/test/demux/data"
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_001.fastq.gz", full.names = TRUE))
FWD <- "GTACACACCGCCCGTC"
REV <- "TGATCCTTCTGCAGGTTCACCTAC"
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
# LOAD READS
path = "/Users/zacharyburcham/Desktop/R_dada2/test/demux/data"
list.files(path)
fnFs <- sort(list.files(path, pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2_001.fastq.gz", full.names = TRUE))
# IDENTIFY PRIMERS
FWD <- "ACCTGCGGARGGATCA"  ## CHANGE ME to your forward primer sequence
REV <- "GAGATCCRTTGYTRAAAGTT"  ## CHANGE ME...
FWD <- "GTACACACCGCCCGTC"
REV <- "TGATCCTTCTGCAGGTTCACCTAC"
allOrients <- function(primer) {
# Create all orientations of the input sequence
require(Biostrings)
dna <- DNAString(primer)  # The Biostrings works w/ DNAString objects rather than character vectors
orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna),
RevComp = reverseComplement(dna))
return(sapply(orients, toString))  # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients
fnFs.filtN <- file.path(path, "filtN", basename(fnFs)) # Put N-filterd files in filtN/ subdirectory
fnRs.filtN <- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE)
primerHits <- function(primer, fn) {
# Counts number of reads in which the primer is found
nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))
library(viridisLite)
show_col(viridis(6))
library(scales)
show_col(viridis(6))
show_col(viridis(4))
viridis(4)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
library(cowplot)
library(qiime2R)
library(reshape2)
library(nortest)
library(FSA)
library(ggalluvial)
library(readr)
library(forcats)
library(MuMIn)
library(lmerTest)
setwd("~/Dropbox/CSU/PMI_3_analyses/multi-omics_data/amplicon/18S/2022_18S/")
family_table = t(read.table('04_artifacts-and-visualizations/18S_FULL_filtered_family_relfreq_table.tsv'))
my.names <- family_table[1,]
colnames(family_table) <- my.names
family_table = as.data.frame(family_table[-1,])
metadata = read.table('../03_metadata/combined-metadata-simple.txt', sep= '\t', header=TRUE)
final_table = left_join(as.data.frame(family_table), as.data.frame(metadata), by = "SampleID")
final_table <- subset(final_table, sample_site %in% c("soil.hip", "skin.hip"))
df_long <- final_table %>% pivot_longer(c(-SampleID, -add_0c, -season, -sample_site, -facility, -decomp_stage, -sample_type),, names_to = "Feature", values_to = "Value")
df_long$Feature <- gsub("^.*f__", "", df_long$Feature)
df_long$Feature <- ifelse(grepl("f__", df_long$Feature), df_long$Feature, "Unclassified")
# Create stacked bar chart for soil hip
p1=ggplot(subset(df_long,sample_site=="soil.hip"), aes(x = SampleID, y = Value, fill = Feature)) +
geom_col() +
labs(x = "SampleID", y = "Value", fill = "Feature") +
theme_bw()
p1
setwd("~/Dropbox/CSU/PMI_3_analyses/multi-omics_data/amplicon/18S/2022_18S/")
family_table = t(read.table('04_artifacts-and-visualizations/18S_FULL_filtered_family_relfreq_table.tsv'))
my.names <- family_table[1,]
colnames(family_table) <- my.names
family_table = as.data.frame(family_table[-1,])
order_table = t(read.table('04_artifacts-and-visualizations/18S_FULL_filtered_order_relfreq_table.tsv'))
my.names <- order_table[1,]
colnames(order_table) <- my.names
order_table = as.data.frame(order_table[-1,])
class_table = t(read.table('04_artifacts-and-visualizations/18S_FULL_filtered_class_relfreq_table.tsv'))
my.names <- class_table[1,]
colnames(class_table) <- my.names
class_table = as.data.frame(class_table[-1,])
metadata = read.table('../03_metadata/combined-metadata-simple.txt', sep= '\t', header=TRUE)
final_family_table = left_join(as.data.frame(family_table), as.data.frame(metadata), by = "SampleID")
final_order_table = left_join(as.data.frame(order_table), as.data.frame(metadata), by = "SampleID")
final_class_table = left_join(as.data.frame(class_table), as.data.frame(metadata), by = "SampleID")
df_long_family <- final_family_table %>% pivot_longer(c(-SampleID, -add_0c, -season, -sample_site, -facility, -decomp_stage, -sample_type), names_to = "Feature", values_to = "Value")
df_long_family$Feature <- gsub("^.*f__", "", df_long_family$Feature)
df_long_family$Feature <- ifelse(grepl("f__", df_long_family$Feature), df_long_family$Feature, "Unclassified")
df_long_order <- final_order_table %>% pivot_longer(c(-SampleID, -add_0c, -season, -sample_site, -facility, -decomp_stage, -sample_type), names_to = "Feature", values_to = "Value")
df_long_order$Feature <- gsub("^.*f__", "", df_long_order$Feature)
df_long_order$Feature <- ifelse(grepl("f__", df_long_order$Feature), df_long_order$Feature, "Unclassified")
df_long_class <- final_class_table %>% pivot_longer(c(-SampleID, -add_0c, -season, -sample_site, -facility, -decomp_stage, -sample_type), names_to = "Feature", values_to = "Value")
df_long_class$Feature <- gsub("^.*f__", "", df_long_class$Feature)
df_long_class$Feature <- ifelse(grepl("f__", df_long_class$Feature), df_long_class$Feature, "Unclassified")
# Create stacked bar chart for soil hip
p1=ggplot(subset(df_long_class,sample_site=="soil.hip"), aes(x = SampleID, y = Value, fill = Feature)) +
geom_col() +
labs(x = "SampleID", y = "Value", fill = "Feature") +
theme_bw()
p1
View(df_long_class)
View(df_long_class)
df_long_family <- final_family_table %>% pivot_longer(c(-SampleID, -add_0c, -season, -sample_site, -facility, -decomp_stage, -sample_type), names_to = "Feature", values_to = "Value")
df_long_family$Feature <- gsub("^.*f__", "", df_long_family$Feature)
df_long_order <- final_order_table %>% pivot_longer(c(-SampleID, -add_0c, -season, -sample_site, -facility, -decomp_stage, -sample_type), names_to = "Feature", values_to = "Value")
df_long_order$Feature <- gsub("^.*f__", "", df_long_order$Feature)
df_long_class <- final_class_table %>% pivot_longer(c(-SampleID, -add_0c, -season, -sample_site, -facility, -decomp_stage, -sample_type), names_to = "Feature", values_to = "Value")
df_long_class$Feature <- gsub("^.*f__", "", df_long_class$Feature)
# Create stacked bar chart for soil hip
p1=ggplot(subset(df_long_class,sample_site=="soil.hip"), aes(x = SampleID, y = Value, fill = Feature)) +
geom_col() +
labs(x = "SampleID", y = "Value", fill = "Feature") +
theme_bw()
p1
save_plot("plot.png",p1, base_height = 7, base_width = 7, dpi=600)
